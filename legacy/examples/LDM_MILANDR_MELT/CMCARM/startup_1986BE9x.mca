;/*****************************************************************************
; * @file:    startup_1986BE9x.mca
; * @author   Phyton Application Team
; * @version: V1.1
; * @date:    25/03/2011
; * @brief:   Milandr Cortex Device CMSIS Startup File for the devices:
; *           1986BE91T, 1986BE92Y, 1986BE93Y
; *****************************************************************************
; * <br><br>
; *
; * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
; * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
; * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT
; * OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
; * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
; * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
; *
; * <h2><center>&copy; COPYRIGHT 2010 Phyton</center></h2>
; *****************************************************************************
; * FILE startup_1986BE9x.mca
; */

.PMODULE  ?startup_device

    .IF .NOT .DEFINED __VECTORS_ADDR
      __VECTORS_ADDR  .EQU  08000000H
    .ENDIF

    .PUBLIC  __Vectors
    .PUBLIC  __Vectors_End

    .EXTRN(code) ?start

    .RSEG CSTACK,data
    .ALIGN  3

    .ASEG INTVEC,code
    .ALIGN  6
    .ORG  __VECTORS_ADDR             ; if vector table is located in RAM,
                                     ; change this value

SET_HANDLER .MACRO Name
    .EXTRNF16 Name          .VOID(.VOID)
    .DCD      Name
.ENDMAC

__Vectors .LABELD
    .DCD            (.SFE CSTACK) + 1       ; Top of Stack
    SET_HANDLER     Reset_Handler           ; Reset Handler
    SET_HANDLER     NMI_Handler             ; NMI Handler
    SET_HANDLER     HardFault_Handler       ; Hard Fault Handler
    SET_HANDLER     MemManage_Handler       ; MPU Fault Handler
    SET_HANDLER     BusFault_Handler        ; Bus Fault Handler
    SET_HANDLER     UsageFault_Handler      ; Usage Fault Handler
    .DCD     0                              ; Reserved
    .DCD     0                              ; Reserved
    .DCD     0                              ; Reserved
    .DCD     0                              ; Reserved
    SET_HANDLER     SVC_Handler             ; SVCall Handler
    SET_HANDLER     DebugMon_Handler        ; Debug Monitor Handler
    .DCD     0                              ; Reserved
    SET_HANDLER     PendSV_Handler          ; PendSV Handler
    SET_HANDLER     SysTick_Handler         ; SysTick Handler
    ; Interrupt Handlers
    SET_HANDLER     CAN1_IRQHandler         ; IRQ0
    SET_HANDLER     CAN2_IRQHandler         ; IRQ1
    SET_HANDLER     USB_IRQHandler          ; IRQ2
    .DCD     0                              ; IRQ3 Reserved
    .DCD     0                              ; IRQ4 Reserved
    SET_HANDLER     DMA_IRQHandler          ; IRQ5
    SET_HANDLER     UART1_IRQHandler        ; IRQ6
    SET_HANDLER     UART2_IRQHandler        ; IRQ7
    SET_HANDLER     SSP1_IRQHandler         ; IRQ8
    .DCD     0                              ; IRQ9 Reserved
    SET_HANDLER     I2C_IRQHandler          ; IRQ10
    SET_HANDLER     POWER_IRQHandler        ; IRQ11
    SET_HANDLER     WWDG_IRQHandler         ; IRQ12
    .DCD     0                              ; IRQ13 Reserved
    SET_HANDLER     Timer1_IRQHandler       ; IRQ14
    SET_HANDLER     Timer2_IRQHandler       ; IRQ15
    SET_HANDLER     Timer3_IRQHandler       ; IRQ16
    SET_HANDLER     ADC_IRQHandler          ; IRQ17
    .DCD     0                              ; IRQ18 Reserved
    SET_HANDLER     COMPARATOR_IRQHandler   ; IRQ19
    SET_HANDLER     SSP2_IRQHandler         ; IRQ20
    .DCD     0                              ; IRQ21 Reserved
    .DCD     0                              ; IRQ22 Reserved
    .DCD     0                              ; IRQ23 Reserved
    .DCD     0                              ; IRQ24 Reserved
    .DCD     0                              ; IRQ25 Reserved
    .DCD     0                              ; IRQ26 Reserved
    SET_HANDLER     BACKUP_IRQHandler       ; IRQ27
    SET_HANDLER     EXT_INT1_IRQHandler     ; IRQ28
    SET_HANDLER     EXT_INT2_IRQHandler     ; IRQ29
    SET_HANDLER     EXT_INT3_IRQHandler     ; IRQ30
    SET_HANDLER     EXT_INT4_IRQHandler     ; IRQ31

__Vectors_End .LABELD

.ENDMOD


;=====================================================================;
;                                                                     ;
;                     Default Reset handler                           ;
;                                                                     ;
;=====================================================================;
.LMODULE2 ?Reset_Handler
.PUBLIC Reset_Handler
.EXTRN(code) ?start
.EXTRNF16 SystemInit .VOID(.VOID)

.RSEG CSTACK,data
.RSEG ??DEFAULT_HANDLERS,code
    .THUMB
Reset_Handler?T:
Reset_Handler   .EQU    Reset_Handler?T+1
.FUNCTYPE .VOID Reset_Handler(.VOID)
    LDR     R0, =(.SFE CSTACK) + 1
    MSR     MSP, R0
    LDR     R0, =SystemInit
    BLX     R0
    LDR     R0, =?start
    BX      R0
.ENDMOD


;=====================================================================;
;                                                                     ;
;                     Default interrupt handlers                      ;
;                                                                     ;
;=====================================================================;
.LMODULE2 ?NMI_Handler
.PUBLIC NMI_Handler
.RSEG ??DEFAULT_HANDLERS,code
    .THUMB
NMI_Handler?T:
NMI_Handler .EQU  NMI_Handler?T+1
.FUNCTYPE .VOID NMI_Handler(.VOID)
    B       $
.ENDMOD


.LMODULE2 ?HardFault_Handler
.PUBLIC HardFault_Handler
.RSEG ??DEFAULT_HANDLERS,code
    .THUMB
HardFault_Handler?T:
HardFault_Handler .EQU  HardFault_Handler?T+1
.FUNCTYPE .VOID HardFault_Handler(.VOID)
    B       $
.ENDMOD


.LMODULE2 ?MemManage_Handler
.PUBLIC MemManage_Handler
.RSEG ??DEFAULT_HANDLERS,code
    .THUMB
MemManage_Handler?T:
MemManage_Handler .EQU  MemManage_Handler?T+1
.FUNCTYPE .VOID MemManage_Handler(.VOID)
    B       $
.ENDMOD


.LMODULE2 ?BusFault_Handler
.PUBLIC BusFault_Handler
.RSEG ??DEFAULT_HANDLERS,code
    .THUMB
BusFault_Handler?T:
BusFault_Handler .EQU  BusFault_Handler?T+1
.FUNCTYPE .VOID BusFault_Handler(.VOID)
    B       $
.ENDMOD


.LMODULE2 ?UsageFault_Handler
.PUBLIC UsageFault_Handler
.RSEG ??DEFAULT_HANDLERS,code
    .THUMB
UsageFault_Handler?T:
UsageFault_Handler .EQU  UsageFault_Handler?T+1
.FUNCTYPE .VOID UsageFault_Handler(.VOID)
    B       $
.ENDMOD


.LMODULE2 ?SVC_Handler
.PUBLIC SVC_Handler
.RSEG ??DEFAULT_HANDLERS,code
    .THUMB
SVC_Handler?T:
SVC_Handler .EQU  SVC_Handler?T+1
.FUNCTYPE .VOID SVC_Handler(.VOID)
    B       $
.ENDMOD


.LMODULE2 ?DebugMon_Handler
.PUBLIC DebugMon_Handler
.RSEG ??DEFAULT_HANDLERS,code
    .THUMB
DebugMon_Handler?T:
DebugMon_Handler .EQU  DebugMon_Handler?T+1
.FUNCTYPE .VOID DebugMon_Handler(.VOID)
    B       $
.ENDMOD


.LMODULE2 ?PendSV_Handler
.PUBLIC PendSV_Handler
.RSEG ??DEFAULT_HANDLERS,code
    .THUMB
PendSV_Handler?T:
PendSV_Handler .EQU  PendSV_Handler?T+1
.FUNCTYPE .VOID PendSV_Handler(.VOID)
    B       $
.ENDMOD


.LMODULE2 ?SysTick_Handler
.PUBLIC SysTick_Handler
.RSEG ??DEFAULT_HANDLERS,code
    .THUMB
SysTick_Handler?T:
SysTick_Handler .EQU  SysTick_Handler?T+1
.FUNCTYPE .VOID SysTick_Handler(.VOID)
    B       $
.ENDMOD


.LMODULE2 ?CAN1_IRQHandler
.PUBLIC CAN1_IRQHandler
.RSEG ??DEFAULT_HANDLERS,code
    .THUMB
CAN1_IRQHandler?T:
CAN1_IRQHandler .EQU  CAN1_IRQHandler?T+1
.FUNCTYPE .VOID CAN1_IRQHandler(.VOID)
    B       $
.ENDMOD


.LMODULE2 ?CAN2_IRQHandler
.PUBLIC CAN2_IRQHandler
.RSEG ??DEFAULT_HANDLERS,code
    .THUMB
CAN2_IRQHandler?T:
CAN2_IRQHandler .EQU  CAN2_IRQHandler?T+1
.FUNCTYPE .VOID CAN2_IRQHandler(.VOID)
    B       $
.ENDMOD


.LMODULE2 ?USB_IRQHandler
.PUBLIC USB_IRQHandler
.RSEG ??DEFAULT_HANDLERS,code
    .THUMB
USB_IRQHandler?T:
USB_IRQHandler .EQU  USB_IRQHandler?T+1
.FUNCTYPE .VOID USB_IRQHandler(.VOID)
    B       $
.ENDMOD


.LMODULE2 ?DMA_IRQHandler
.PUBLIC DMA_IRQHandler
.RSEG ??DEFAULT_HANDLERS,code
    .THUMB
DMA_IRQHandler?T:
DMA_IRQHandler .EQU  DMA_IRQHandler?T+1
.FUNCTYPE .VOID DMA_IRQHandler(.VOID)
    B       $
.ENDMOD


.LMODULE2 ?UART1_IRQHandler
.PUBLIC UART1_IRQHandler
.RSEG ??DEFAULT_HANDLERS,code
    .THUMB
UART1_IRQHandler?T:
UART1_IRQHandler .EQU  UART1_IRQHandler?T+1
.FUNCTYPE .VOID UART1_IRQHandler(.VOID)
    B       $
.ENDMOD


.LMODULE2 ?UART2_IRQHandler
.PUBLIC UART2_IRQHandler
.RSEG ??DEFAULT_HANDLERS,code
    .THUMB
UART2_IRQHandler?T:
UART2_IRQHandler .EQU  UART2_IRQHandler?T+1
.FUNCTYPE .VOID UART2_IRQHandler(.VOID)
    B       $
.ENDMOD


.LMODULE2 ?SSP1_IRQHandler
.PUBLIC SSP1_IRQHandler
.RSEG ??DEFAULT_HANDLERS,code
    .THUMB
SSP1_IRQHandler?T:
SSP1_IRQHandler .EQU  SSP1_IRQHandler?T+1
.FUNCTYPE .VOID SSP1_IRQHandler(.VOID)
    B       $
.ENDMOD


.LMODULE2 ?I2C_IRQHandler
.PUBLIC I2C_IRQHandler
.RSEG ??DEFAULT_HANDLERS,code
    .THUMB
I2C_IRQHandler?T:
I2C_IRQHandler .EQU  I2C_IRQHandler?T+1
.FUNCTYPE .VOID I2C_IRQHandler(.VOID)
    B       $
.ENDMOD


.LMODULE2 ?POWER_IRQHandler
.PUBLIC POWER_IRQHandler
.RSEG ??DEFAULT_HANDLERS,code
    .THUMB
POWER_IRQHandler?T:
POWER_IRQHandler .EQU  POWER_IRQHandler?T+1
.FUNCTYPE .VOID POWER_IRQHandler(.VOID)
    B       $
.ENDMOD


.LMODULE2 ?WWDG_IRQHandler
.PUBLIC WWDG_IRQHandler
.RSEG ??DEFAULT_HANDLERS,code
    .THUMB
WWDG_IRQHandler?T:
WWDG_IRQHandler .EQU  WWDG_IRQHandler?T+1
.FUNCTYPE .VOID WWDG_IRQHandler(.VOID)
    B       $
.ENDMOD


.LMODULE2 ?Timer1_IRQHandler
.PUBLIC Timer1_IRQHandler
.RSEG ??DEFAULT_HANDLERS,code
    .THUMB
Timer1_IRQHandler?T:
Timer1_IRQHandler .EQU  Timer1_IRQHandler?T+1
.FUNCTYPE .VOID Timer1_IRQHandler(.VOID)
    B       $
.ENDMOD


.LMODULE2 ?Timer2_IRQHandler
.PUBLIC Timer2_IRQHandler
.RSEG ??DEFAULT_HANDLERS,code
    .THUMB
Timer2_IRQHandler?T:
Timer2_IRQHandler .EQU  Timer2_IRQHandler?T+1
.FUNCTYPE .VOID Timer2_IRQHandler(.VOID)
    B       $
.ENDMOD


.LMODULE2 ?Timer3_IRQHandler
.PUBLIC Timer3_IRQHandler
.RSEG ??DEFAULT_HANDLERS,code
    .THUMB
Timer3_IRQHandler?T:
Timer3_IRQHandler .EQU  Timer3_IRQHandler?T+1
.FUNCTYPE .VOID Timer3_IRQHandler(.VOID)
    B       $
.ENDMOD


.LMODULE2 ?ADC_IRQHandler
.PUBLIC ADC_IRQHandler
.RSEG ??DEFAULT_HANDLERS,code
    .THUMB
ADC_IRQHandler?T:
ADC_IRQHandler .EQU  ADC_IRQHandler?T+1
.FUNCTYPE .VOID ADC_IRQHandler(.VOID)
    B       $
.ENDMOD


.LMODULE2 ?COMPARATOR_IRQHandler
.PUBLIC COMPARATOR_IRQHandler
.RSEG ??DEFAULT_HANDLERS,code
    .THUMB
COMPARATOR_IRQHandler?T:
COMPARATOR_IRQHandler .EQU  COMPARATOR_IRQHandler?T+1
.FUNCTYPE .VOID COMPARATOR_IRQHandler(.VOID)
    B       $
.ENDMOD


.LMODULE2 ?SSP2_IRQHandler
.PUBLIC SSP2_IRQHandler
.RSEG ??DEFAULT_HANDLERS,code
    .THUMB
SSP2_IRQHandler?T:
SSP2_IRQHandler .EQU  SSP2_IRQHandler?T+1
.FUNCTYPE .VOID SSP2_IRQHandler(.VOID)
    B       $
.ENDMOD


.LMODULE2 ?BACKUP_IRQHandler
.PUBLIC BACKUP_IRQHandler
.RSEG ??DEFAULT_HANDLERS,code
    .THUMB
BACKUP_IRQHandler?T:
BACKUP_IRQHandler .EQU  BACKUP_IRQHandler?T+1
.FUNCTYPE .VOID BACKUP_IRQHandler(.VOID)
    B       $
.ENDMOD


.LMODULE2 ?EXT_INT1_IRQHandler
.PUBLIC EXT_INT1_IRQHandler
.RSEG ??DEFAULT_HANDLERS,code
    .THUMB
EXT_INT1_IRQHandler?T:
EXT_INT1_IRQHandler .EQU  EXT_INT1_IRQHandler?T+1
.FUNCTYPE .VOID EXT_INT1_IRQHandler(.VOID)
    B       $
.ENDMOD


.LMODULE2 ?EXT_INT2_IRQHandler
.PUBLIC EXT_INT2_IRQHandler
.RSEG ??DEFAULT_HANDLERS,code
    .THUMB
EXT_INT2_IRQHandler?T:
EXT_INT2_IRQHandler .EQU  EXT_INT2_IRQHandler?T+1
.FUNCTYPE .VOID EXT_INT2_IRQHandler(.VOID)
    B       $
.ENDMOD


.LMODULE2 ?EXT_INT3_IRQHandler
.PUBLIC EXT_INT3_IRQHandler
.RSEG ??DEFAULT_HANDLERS,code
    .THUMB
EXT_INT3_IRQHandler?T:
EXT_INT3_IRQHandler .EQU  EXT_INT3_IRQHandler?T+1
.FUNCTYPE .VOID EXT_INT3_IRQHandler(.VOID)
    B       $
.ENDMOD


.LMODULE2 ?EXT_INT4_IRQHandler
.PUBLIC EXT_INT4_IRQHandler
.RSEG ??DEFAULT_HANDLERS,code
    .THUMB
EXT_INT4_IRQHandler?T:
EXT_INT4_IRQHandler .EQU  EXT_INT4_IRQHandler?T+1
.FUNCTYPE .VOID EXT_INT4_IRQHandler(.VOID)
    B       $
.ENDMOD


;=====================================================================;
;                                                                     ;
;       User-defined low-level initialization that is made            ;
;                     before cstartup                                 ;
;                                                                     ;
;=====================================================================;
.LMODULE2 ??SystemInit
.PUBLIC SystemInit
.RSEG   ??CODE_CLIB,code
.THUMB
SystemInit?T:
SystemInit .EQU SystemInit?T+1
.FUNCTYPE .VOID SystemInit(.VOID)
    BX      LR

.END

;/******************* (C) COPYRIGHT 2010 Phyton *******************************
;*
;* END OF FILE startup_1986BE9x.mca */
